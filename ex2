import math
import numpy as np
import matplotlib.pyplot as plt

xfile = open("ex2data1.txt",'r')

X = []
y = []
addm = []
for row in xfile:
    X.append(float(row[:row.find(',')]))
    y.append(float(row[row.find(',') + 1:row.rfind(',')]))
    addm.append((row[row.rfind(',')+1:-1]))

negX = []
negy = []
posX = []
posy = []
for i in range(len(X)):
    if addm[i] == '0':
        negX.append(X[i])
        negy.append(y[i])
    else:
        posX.append(X[i])
        posy.append(y[i])


plt.plot(negX,negy,'yo')
plt.plot(posX,posy,'k+')

Xmatrix = np.ones([len(X),1])
Xmatrix[:,0] = X
X = Xmatrix

ymatrix = np.ones([len(y),1])
ymatrix[:,0] = y
y = ymatrix



def sigmoid(z):
    return 1 / ( 1 + (math.e ** (-z)))


def gradientDescent(X,y):
    theta = np.ones([len(X),1])
    for j in range(len(X)):
        theta[j,0] = (np.sum(sigmoid(theta[:,0]*X[:,0]) - y[:,0])) * X[:,0] / len(X)
    return theta



def computeCost(X,y,theta):
    sum = 0
    for i in range(len(X)):
        sum += (-y[i,0]) * math.log10(sigmoid(theta[i,0]*X[i,0])) - (1-y[i,0]) * math.log10(1 - (sigmoid(theta[i,0]*X[i,0])))
    return sum / len(X)

print(computeCost(X,y,theta))
